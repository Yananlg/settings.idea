<application>
  <component name="AppStorage">
    <histories>
      <item value="the target type of the join" />
      <item value="the source type of the join" />
      <item value="Specify whether this resolver's cookies should be compliant with BCP 47 language tags instead of Java's legacy locale specification format. &lt;p&gt;The default is code true, as of 5.1. Switch this to code false for rendering Java's legacy locale specification format. For parsing, this resolver leniently accepts the legacy link Locale#toString format as well as BCP 47 language tags in any case." />
      <item value="Specify whether to reject cookies with invalid content (e.g. invalid format). &lt;p&gt;The default is code true. Turn this off for lenient handling of parse failures, falling back to the default locale and time zone in such a case." />
      <item value="Set whether to ignore an invalid value for the locale parameter." />
      <item value="The headers of the mapped request, narrowing the primary mapping. &lt;p&gt;Same format for any environment: a sequence of &quot;My-Header=myValue&quot; style expressions, with a request only mapped if each such header is found to have the given value. Expressions can be negated by using the &quot;!=&quot; operator, as in &quot;My-Header!=myValue&quot;. &quot;My-Header&quot; style expressions are also supported, with such headers having to be present in the request (allowed to have any value). Finally, &quot;!My-Header&quot; style expressions indicate that the specified header is &lt;i&gt;not&lt;i&gt; supposed to be present in the request. &lt;p&gt;Also supports media type wildcards (), for headers such as Accept and Content-Type. For instance, &lt;pre class=&quot;code&quot;&gt; &amp;#064;RequestMapping(value = &quot;something&quot;, headers = &quot;content-type=text&quot;) &lt;pre&gt; will match requests with a Content-Type of &quot;texthtml&quot;, &quot;textplain&quot;, etc. &lt;p&gt;&lt;b&gt;Supported at the type level as well as at the method level!&lt;b&gt; When used at the type level, all method-level mappings inherit this header restriction (i.e. the type-level restriction gets checked before the handler method is even resolved)." />
      <item value="When the javax.persistence.fetchgraph property is used to specify an entity graph, attributes that are specified by attribute nodes of the entity graph are treated as FetchType.EAGER and attributes that are not specified are treated as FetchType.LAZY" />
      <item value="When the javax.persistence.loadgraph property is used to specify an entity graph, attributes that are specified by attribute nodes of the entity graph are treated as FetchType.EAGER and attributes that are not specified are treated according to their specified or default FetchType." />
      <item value="Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request." />
      <item value="tuple" />
      <item value="(Optional) The name of the entity graph. Defaults to the entity name of the root entity." />
      <item value="The paths of attributes of this link EntityGraph to use, empty by default. You can refer to direct properties of the entity or nested properties via a code property.nestedProperty." />
      <item value="The name of the EntityGraph to use. If empty we fall-back to link JpaQueryMethod#getNamedQueryName() as the value." />
      <item value="Annotation to configure the JPA 2.1 link javax.persistence.EntityGraphs that should be used on repository methods. Since 1.9 we support the definition of dynamic link EntityGraphs by allowing to customize the fetch-graph via via link #attributePaths() ad-hoc fetch-graph configuration." />
      <item value="unless" />
      <item value="Returns a collection containing all the elements in &lt;code&gt;collection&lt;code&gt; that are also in &lt;code&gt;retain&lt;code&gt;. The cardinality of an element &lt;code&gt;e&lt;code&gt; in the returned collection is the same as the cardinality of &lt;code&gt;e&lt;code&gt; in &lt;code&gt;collection&lt;code&gt; unless &lt;code&gt;retain&lt;code&gt; does not contain &lt;code&gt;e&lt;code&gt;, in which case the cardinality is zero. This method is useful if you do not wish to modify the collection &lt;code&gt;c&lt;code&gt; and thus cannot call &lt;code&gt;c.retainAll(retain);&lt;code&gt;. &lt;p&gt;" />
      <item value="Annotation used to indicate that associated property is part of two-way linkage between fields; and that its role is &quot;child&quot; (or &quot;back&quot;) link. Value type of the property must be a bean: it can not be a Collection, Map, Array or enumeration. Linkage is handled such that the property annotated with this annotation is not serialized; and during deserialization, its value is set to instance that has the &quot;managed&quot; (forward) link. &lt;p&gt; All references have logical name to allow handling multiple linkages; typical case would be that where nodes have both parentchild and sibling linkages. If so, pairs of references should be named differently. It is an error for a class to have multiple back references with same name, even if types pointed are different. &lt;p&gt; Note: only methods and fields can be annotated with this annotation: constructor arguments should NOT be annotated, as they can not be either managed or back references." />
      <item value="Use an outer join to load the related entities, collections or joins." />
      <item value="Use a secondary select for each individual entity, collection, or join load." />
      <item value="Fetch options on associations. Defines more of the &quot;how&quot; of fetching, whereas JPA link javax.persistence.FetchType focuses on the &quot;when&quot;." />
      <item value="Available for collections only.  When accessing a non-initialized collection, this fetch mode will trigger loading all elements of all collections of the same role for all owners associated with the persistence context using a single secondary select." />
      <item value="(Optional) The name of the primary key generator to use as specified in the link SequenceGenerator or link TableGenerator annotation. &lt;p&gt; Defaults to the id generator supplied by persistence provider." />
      <item value="Specifies a composite primary key class that is mapped to multiple fields or properties of the entity. &lt;p&gt; The names of the fields or properties in the primary key class and the primary key fields or properties of the entity must correspond and their types must be the same." />
      <item value="selection specifying the item that is to be returned in the query result" />
      <item value="For example: CriteriaQuery&amp;#060;String&amp;#062; q = cb.createQuery(String.class); Root&amp;#060;Order&amp;#062; order = q.from(Order.class); q.select(order.get(&quot;shippingAddress&quot;).&amp;#060;String&amp;#062;get(&quot;state&quot;)); CriteriaQuery&amp;#060;Product&amp;#062; q2 = cb.createQuery(Product.class); q2.select(q2.from(Order.class) .join(&quot;items&quot;) .&amp;#060;Item,Product&amp;#062;join(&quot;product&quot;));" />
      <item value="Specify the item that is to be returned in the query result. Replaces the previously specified selection(s), if any. &lt;p&gt; Note: Applications using the string-based API may need to specify the type of the select item when it results from a get or join operation and the query result type is specified." />
      <item value="(Optional) Whether to apply the remove operation to entities that have been removed from the relationship and to cascade the remove operation to those entities." />
      <item value="(Optional) Whether the association is optional. If set to false then a non-null relationship must always exist." />
      <item value="(Optional) Whether the association should be lazily loaded or must be eagerly fetched. The EAGER strategy is a requirement on the persistence provider runtime that the associated entity must be eagerly fetched. The LAZY strategy is a hint to the persistence provider runtime." />
      <item value="(Optional) The operations that must be cascaded to the target of the association. &lt;p&gt; By default no operations are cascaded." />
      <item value="(Optional) The entity class that is the target of the association. &lt;p&gt; Defaults to the type of the field or property that stores the association." />
      <item value="typical" />
      <item value="sort" />
      <item value="Reports the result of constraint violations." />
      <item value="Store specific default." />
      <item value="containing" />
      <item value="If two code ConstraintValidators refer to the same type, an exception will occur. &lt;p&gt; At most one code ConstraintValidator targeting the array of parameters of methods or constructors (aka cross-parameter) is accepted. If two or more are present, an exception will occur." />
      <item value="When building a constraint that is both generic and cross-parameter, the constraint annotation must host the code validationAppliesTo() property. A constraint is generic if it targets the annotated element and is cross-parameter if it targets the array of parameters of a method or constructor." />
      <item value="Marks an annotation as being a Bean Validation constraint. &lt;p&gt; A given constraint annotation must be annotated by a code Constraint annotation which refers to its list of constraint validation implementations. &lt;p&gt; Each constraint annotation must host the following attributes: &lt;ul&gt; &lt;li&gt;code String message() default [...]; which should default to an error message key made of the fully-qualified class name of the constraint followed by code .message. For example code &quot;com.acme.constraints.NotSafe.message&quot;&lt;li&gt; &lt;li&gt;code Class&lt;?&gt;[] groups() default ; for user to customize the targeted groups&lt;li&gt; &lt;li&gt;code Class&lt;? extends Payload&gt;[] payload() default ; for extensibility purposes&lt;li&gt; &lt;ul&gt; &lt;p&gt;" />
      <item value="Marks an annotation as being a Bean Validation constraint. &lt;p&gt; A given constraint annotation must be annotated by a code Constraint annotation which refers to its list of constraint validation implementations. &lt;p&gt; Each constraint annotation must host the following attributes: &lt;ul&gt; &lt;li&gt;code String message() default [...]; which should default to an error message key made of the fully-qualified class name of the constraint followed by code .message. For example code &quot;com.acme.constraints.NotSafe.message&quot;&lt;li&gt; &lt;li&gt;code Class&lt;?&gt;[] groups() default ; for user to customize the targeted groups&lt;li&gt; &lt;li&gt;code Class&lt;? extends Payload&gt;[] payload() default ; for extensibility purposes&lt;li&gt; &lt;ul&gt; &lt;p&gt; When building a constraint that is both generic and cross-parameter, the constraint annotation must host the code validationAppliesTo() property. A constraint is generic if it targets the annotated element and is cross-parameter if it targets the array of parameters of a method or constructor. &lt;pre&gt; ConstraintTarget validationAppliesTo() default ConstraintTarget.IMPLICIT; &lt;pre&gt; This property allows the constraint user to choose whether the constraint targets the return type of the executable or its array of parameters. A constraint is both generic and cross-parameter if &lt;ul&gt; &lt;li&gt;two kinds of code ConstraintValidators are attached to the constraint, one targeting link ValidationTarget#ANNOTATED_ELEMENT and one targeting link ValidationTarget#PARAMETERS,&lt;li&gt; &lt;li&gt;or if a code ConstraintValidator targets both code ANNOTATED_ELEMENT and code PARAMETERS.&lt;li&gt; &lt;ul&gt; Such dual constraints are rare. See link SupportedValidationTarget for more info. &lt;p&gt; Here is an example of constraint definition: &lt;pre&gt; &amp;#64;Documented &amp;#64;Constraint(validatedBy = OrderNumberValidator.class) &amp;#64;Target( METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE ) &amp;#64;Retention(RUNTIME) public &amp;#64;interface OrderNumber String message() default &quot;com.acme.constraint.OrderNumber.message&quot;; Class&amp;lt;?&amp;gt;[] groups() default ; Class&amp;lt;? extends Payload&amp;gt;[] payload() default ; &lt;pre&gt;" />
      <item value="proved plate" />
      <item value="idle" />
      <item value="Threshold after which files are written to disk." />
      <item value="The &lt;code&gt;attributeName&lt;code&gt; element must be specified unless the &lt;code&gt;Convert&lt;code&gt; annotation is on an attribute of basic type or on an element collection of basic type. In these cases, the &lt;code&gt;attributeName&lt;code&gt; element must not be specified." />
      <item value="expecting" />
      <item value="Creates a new link Sort for the given link Orders." />
      <item value="Returns whether the current link Pageable contains pagination information." />
      <item value="Returns a link Pageable instance representing no pagination setup." />
      <item value="Returns the current link Sort or the given one if the current one is unsorted. param sort must not be literal null." />
      <item value="Sets the flag that controls if this cookie will be hidden from scripts on the client side. param httpOnly The new value of the flag" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="462" />
        <entry key="ENGLISH" value="463" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20190222000270023" />
        <option name="appKeyConfigured" value="true" />
      </app-key>
    </option>
    <option name="foldOriginal" value="true" />
    <option name="ignoreRegExp" value="[\/\*\@\{\}]" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Source Code Pro" />
    <option name="primaryFontFamily" value="Microsoft YaHei" />
    <option name="translator" value="fanyi.baidu" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="0b9675ec9310c20e" />
      </youdao-translate>
    </option>
  </component>
</application>