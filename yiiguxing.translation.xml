<application>
  <component name="AppStorage">
    <histories>
      <item value="Command" />
      <item value="Commond" />
      <item value="The default implementation makes no guarantees about synchronization or atomicity properties of this method. Any implementation providing atomicity guarantees must override this method and document its concurrency properties." />
      <item value="&lt;p&gt;Like with any annotation in Java, the mere presence of code AliasFor on its own will not enforce alias semantics. For alias semantics to be enforced, annotations must be &lt;em&gt;loaded&lt;em&gt; via the utility methods in link AnnotationUtils. Behind the scenes, Spring will &lt;em&gt;synthesize&lt;em&gt; an annotation by wrapping it in a dynamic proxy that transparently enforces &lt;em&gt;attribute alias&lt;em&gt; semantics for annotation attributes that are annotated with code AliasFor. Similarly, link AnnotatedElementUtils supports explicit meta-annotation attribute overrides when code AliasFor is used within an annotation hierarchy. Typically you will not need to manually synthesize annotations on your own since Spring will do that for you transparently when looking up annotations on Spring-managed components." />
      <item value="Explicit aliases within an annotation&lt;strong&gt;: within a single annotation, code AliasFor can be declared on a pair of attributes to signal that they are interchangeable aliases for each other.&lt;li&gt; &lt;li&gt;&lt;strong&gt;Explicit alias for attribute in meta-annotation&lt;strong&gt;: if the link #annotation attribute of code AliasFor is set to a different annotation than the one that declares it, the link #attribute is interpreted as an alias for an attribute in a meta-annotation (i.e., an explicit meta-annotation attribute override). This enables fine-grained control over exactly which attributes are overridden within an annotation hierarchy. In fact, with code AliasFor it is even possible to declare an alias for the code value attribute of a meta-annotation.&lt;li&gt; &lt;li&gt;&lt;strong&gt;Implicit aliases within an annotation&lt;strong&gt;: if one or more attributes within an annotation are declared as attribute overrides for the same meta-annotation attribute (either directly or transitively), those attributes will be treated as a set of &lt;em&gt;implicit&lt;em&gt; aliases for each other, resulting in behavior analogous to that for explicit aliases within an annotation.&lt;li&gt;" />
      <item value="Fraction" />
      <item value="Digits" />
      <item value="Amount" />
      <item value="Payment" />
      <item value="Minutes" />
      <item value="Creates a string representation of this &lt;tt&gt;Date&lt;tt&gt; object in an implementation-dependent form. The intent is that the form should be familiar to the user of the Java application, wherever it may happen to be running. The intent is comparable to that of the &quot;&lt;code&gt;%c&lt;code&gt;&quot; format supported by the &lt;code&gt;strftime()&lt;code&gt; function of ISO&amp;nbsp;C." />
      <item value="delta" />
      <item value="length" />
      <item value="sharding results for data sources or tables's names" />
      <item value="sharding value" />
      <item value="available data sources or tables's names" />
      <item value="Strategy" />
      <item value="squarely" />
      <item value="Indicates that the persistence provider must assign primary keys for the entity using an underlying database table to ensure uniqueness." />
      <item value="The name of the primary key generator to use as specified in the link SequenceGenerator or link TableGenerator annotation. &lt;p&gt; Defaults to the id generator supplied by persistence provider." />
      <item value="Indicates that the persistence provider should pick an appropriate strategy for the particular database. The &lt;code&gt;AUTO&lt;code&gt; generation strategy may expect a database resource to exist, or it may attempt to create one. A vendor may provide documentation on how to create such resources in the event that it does not support schema generation or cannot create the schema resource at runtime." />
      <item value="Indicates that the persistence provider must assign primary keys for the entity using a database identity column." />
      <item value="Feature that may be enabled to force replacement &lt;code&gt;org.hibernate.collection.spi.PersistentCollection&lt;code&gt;, &lt;code&gt;List&lt;code&gt;, &lt;code&gt;Set&lt;code&gt;, &lt;code&gt;Map&lt;code&gt; subclasses during serialization as standard JDK link java.util.List, link java.util.Set and link java.util.Map. This is usually done to prevent issues with polymorphic handling, so that type id is generated for standard containers and NOT for Hibernate variants. &lt;p&gt;" />
      <item value="This feature determines how link org.hibernate.collection.spi.PersistentCollections properties for which no annotation is found are handled with respect to lazy-loading: if true, lazy-loading is only assumed if annotation is used to indicate that; if false, lazy-loading is assumed to be the default. Note that link #FORCE_LAZY_LOADING has priority over this Feature; meaning that if it is defined as true, setting of this Feature has no effect. &lt;p&gt; Default value is false, meaning that laziness is considered to be the default value." />
      <item value="Whether lazy-loaded object should be forced to be loaded and then serialized (true); or serialized as nulls (false). &lt;p&gt; Default value is false." />
      <item value="Whether link javax.persistence.Transient annotation should be checked or not; if true, will consider code Transient to mean that property is to be ignored; if false annotation will have no effect. &lt;p&gt; Default value is true." />
      <item value="If FORCE_LAZY_LOADING is false, this feature serializes uninitialized lazy loading proxies as &lt;code&gt;&quot;identifierName&quot;:&quot;identifierValue&quot;&lt;code&gt; rather than &lt;code&gt;null&lt;code&gt;. &lt;p&gt; Default value is false. &lt;p&gt; Note that the name of the identifier property can only be determined if &lt;ul&gt; &lt;li&gt;the link Mapping is provided to the Hibernate5Module, or &lt;li&gt; &lt;li&gt;the persistence context that loaded the proxy has not yet been closed, or&lt;li&gt; &lt;li&gt;the id property is mapped with property access (for instance because the code Id annotation is applied to a method rather than a field)&lt;li&gt; &lt;ul&gt; Otherwise, the entity name will be used instead." />
      <item value="ROUND ROBIN" />
      <item value="RANDOM" />
      <item value="orchestration" />
      <item value="the names of the classes that must not be present" />
      <item value="The names of the classes that must not be present." />
      <item value="The optional name of a method to call on the bean instance during initialization. Not commonly used, given that the method may be called programmatically directly within the body of a Bean-annotated method." />
      <item value="bookin" />
      <item value="the period between successive executions" />
      <item value="Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next. If any execution of the task encounters an exception, subsequent executions are suppressed. Otherwise, the task will only terminate via cancellation or termination of the executor." />
      <item value="Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is executions will commence after code initialDelay then code initialDelay+period, then code initialDelay + 2 period, and so on. If any execution of the task encounters an exception, subsequent executions are suppressed. Otherwise, the task will only terminate via cancellation or termination of the executor. If any execution of this task takes longer than its period, then subsequent executions may start late, but will not concurrently execute." />
      <item value="Creates and executes a one-shot action that becomes enabled after the given delay." />
      <item value="persist" />
      <item value="Gets the callback response body. The caller needs to close it. Deprecated method. Please use this.getResponse().getContent() instead." />
      <item value="The parameters code protocol, code host and code port are matched against the corresponding parts of the URL. and an additional regular expression can be specified using code regexp and code flags to further restrict the matching criteria." />
      <item value="the protocol (scheme) the annotated string must match, e.g. ftp or http. Per default any protocol is allowed" />
      <item value="an additional regular expression the annotated URL must match. The default is any string ('.')" />
      <item value="Cust" />
      <item value="increment" />
      <item value="Atomically increment by one the current value." />
      <item value="Atomic long backed by Redis. Uses Redis atomic incrementdecrement and watchmultiexec operations for CAS operations." />
      <item value="Add an inline element to the MimeMessage, taking the content from a code javax.activation.DataSource. &lt;p&gt;Note that the InputStream returned by the DataSource implementation needs to be a &lt;i&gt;fresh one on each call&lt;i&gt;, as JavaMail will invoke code getInputStream() multiple times. &lt;p&gt;&lt;b&gt;NOTE:&lt;b&gt; Invoke code addInline &lt;i&gt;after&lt;i&gt; link #setText; else, mail readers might not be able to resolve inline references correctly. param contentId the content ID to use. Will end up as &quot;Content-ID&quot; header in the body part, surrounded by angle brackets: e.g. &quot;myId&quot; -&gt; &quot;&amp;lt;myId&amp;gt;&quot;. Can be referenced in HTML source via src=&quot;cid:myId&quot; expressions. param dataSource the code javax.activation.DataSource to take the content from, determining the InputStream and the content type" />
      <item value="Creates a localized description of this throwable. Subclasses may override this method in order to produce a locale-specific message. For subclasses that do not override this method, the default implementation returns the same result as code getMessage()." />
      <item value="Proving" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="538" />
        <entry key="ENGLISH" value="539" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20190222000270023" />
      </app-key>
    </option>
    <option name="foldOriginal" value="true" />
    <option name="ignoreRegExp" value="[\/\*\@\{\}]" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Source Code Pro" />
    <option name="primaryFontFamily" value="Microsoft YaHei" />
    <option name="translator" value="fanyi.baidu" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="0b9675ec9310c20e" />
      </youdao-translate>
    </option>
  </component>
</application>