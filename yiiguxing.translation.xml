<application>
  <component name="AppStorage">
    <histories>
      <item value="Feature" />
      <item value="Returns this Subject's application-wide uniquely identifying principal, or {@code null} if this Subject is anonymous because it doesn't yet have any associated account data (for example, if they haven't logged in). &lt;p/&gt; The term &lt;em&gt;principal&lt;/em&gt; is just a fancy security term for any identifying attribute(s) of an application user, such as a username, or user id, or public key, or anything else you might use in your application to identify a user. &lt;h4&gt;Uniqueness&lt;/h4&gt; Although given names and family names (first/last) are technically considered principals as well, Shiro expects the object returned from this method to be an identifying attribute unique across your entire application. &lt;p/&gt; This implies that things like given names and family names are usually poor candidates as return values since they are rarely guaranteed to be unique; Things often used for this value:" />
      <item value="Exception thrown if there is a problem during authorization (access control check)." />
      <item value="Authorization FAIL" />
      <item value="General exception thrown due to an error during the Authentication process." />
      <item value="Exception thrown due to a problem with the credential(s) submitted for an account during the authentication process." />
      <item value="Exception thrown due to a problem with the account under which an authentication attempt is being executed." />
      <item value="Exception wrapping any potential checked exception thrown when a {@code Subject} executes a {@link java.util.concurrent.Callable}. This is a nicer alternative than forcing calling code to catch a normal checked {@code Exception} when it may not be necessary. &lt;p/&gt; If thrown, the causing exception will always be accessible via the {@link #getCause() getCause()} method." />
      <item value="Exception thrown when attempting to instantiate a Class via reflection, but a suitable constructor (depending on the number of expected arguments) doesn't exist or cannot be obtained." />
      <item value="Thrown by {@link PermissionResolver#resolvePermission(String)} when the String being parsed is not valid for that resolver." />
      <item value="Exception thrown when attempting to acquire the application's {@code SecurityManager} instance, but Shiro's lookup heuristics cannot find one. This typically indicates an invalid application configuration." />
      <item value="The logical operation for the permission check in case multiple roles are specified. AND is the default" />
      <item value="CONFLICT" />
      <item value="Attempts" />
      <item value="Excessive" />
      <item value="Invoked second (and last) if the body is empty." />
      <item value="increment" />
      <item value="the salt used when hashing the given hashedCredentials" />
      <item value="a Realm's account's identifying principal(s)" />
      <item value="Constructor that takes in an account's identifying principal(s) and its corresponding credentials that verify the principals." />
      <item value="the 'primary' principal associated with the specified realm." />
      <item value="the realm from where the principal and credentials were acquired." />
      <item value="monster" />
      <item value="ITERATIONS" />
      <item value="a fully-qualified class name." />
      <item value="Returns the interfaces implemented by this service provider" />
      <item value="Creates a new auxiliary resource file for writing and returns a file object for it. The file may be located along with the newly created source files, newly created binary files, or other supported location. The locations {@link StandardLocation#CLASS_OUTPUT CLASS_OUTPUT} and {@link StandardLocation#SOURCE_OUTPUT SOURCE_OUTPUT} must be supported. The resource may be named relative to some package (as are source and class files), and from there by a relative pathname. In a loose sense, the full pathname of the new file will be the concatenation of {@code location}, {@code pkg}, and {@code relativeName}." />
      <item value="Creates a new source file and returns an object to allow writing to it. The file's name and path (relative to the {@linkplain StandardLocation#SOURCE_OUTPUT root output location for source files}) are based on the type to be declared in that file. If more than one type is being declared, the name of the principal top-level type (the public one, for example) should be used. A source file can also be created to hold information about a package, including package annotations. To create a source file for a named package, have {@code name} be the package's name followed by {@code &quot;.package-info&quot;}; to create a source file for an unnamed package, use {@code &quot;package-info&quot;}." />
      <item value="Returns an implementation of some utility methods for operating on types." />
      <item value="Returns the messager used to report errors, warnings, and other notices." />
      <item value="Returns the processor-specific options passed to the annotation processing tool. Options are returned in the form of a map from option name to option value. For an option with no value, the corresponding value in the map is {@code null}." />
      <item value="Returns the filer used to create new source, class, or auxiliary files." />
      <item value="Returns an implementation of some utility methods for operating on elements" />
      <item value="Determines the interfaces implemented by the class or interface represented by this object." />
      <item value="xlsPrefix + fileName" />
      <item value="description" />
      <item value="The string representation of the expected value for the properties. If not specified, the property must &lt;strong&gt;not&lt;/strong&gt; be equal to {@code false}." />
      <item value="since Shiro 1.1. Hash salting is now expected to be based on if the {@link AuthenticationInfo} returned from the {@code Realm} is a {@link SaltedAuthenticationInfo} instance and its {@link org.apache.shiro.authc.SaltedAuthenticationInfo#getCredentialsSalt() getCredentialsSalt()} method returns a non-null value. This method and the 1.0 behavior still exists for backwards compatibility if the {@code Realm} does not return {@code SaltedAuthenticationInfo} instances, but &lt;b&gt;it is highly recommended that {@code Realm} implementations that support hashed credentials start returning {@link SaltedAuthenticationInfo SaltedAuthenticationInfo} instances as soon as possible&lt;/b&gt;." />
      <item value="This is because salts should always be obtained from the stored account information and never be interpreted based on user/Subject-entered data. User-entered data is easier to compromise for attackers, whereas account-unique (and secure randomly-generated) salts never disseminated to the end-user are almost impossible to break. This method will be removed in Shiro 2.0." />
      <item value="A value of {@code true} will cause this class to decode the system credential from Hex, a value of {@code false} will cause this class to decode the system credential from Base64." />
      <item value="Sets the indicator if this system's stored credential hash is Hex encoded or not." />
      <item value="should never execute because this implementation relies on parent class to access cache, which //is where all sessions reside - it is the cache implementation that determines if the //cache is memory only or disk-persistent, etc." />
      <item value="Prepends the prefix to the start of the string if the string does not already start with any of the prefixes." />
      <item value="similar" />
      <item value="alpha-numeric" />
      <item value="Alphabetic" />
      <item value="Return the class that declares the underlying Method or Constructor." />
      <item value="purposes" />
      <item value="Create AOP advice for method validation purposes, to be applied with a pointcut for the specified 'validated' annotation. @param validator the JSR-303 Validator to delegate to @return the interceptor to use (typically, but not necessarily, a {@link MethodValidationInterceptor} or subclass thereof)" />
      <item value="Set the JSR-303 Validator to delegate to for validating methods. Default is the default ValidatorFactory's default Validator. /" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="148" />
        <entry key="ENGLISH" value="149" />
        <entry key="GERMAN" value="2" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20190222000270023" />
        <option name="appKeyConfigured" value="true" />
      </app-key>
    </option>
    <option name="foldOriginal" value="true" />
    <option name="ignoreRegExp" value="[\*]|(&lt;p&gt;)" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Source Code Pro" />
    <option name="primaryFontFamily" value="Microsoft YaHei" />
    <option name="translator" value="fanyi.baidu" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="0b9675ec9310c20e" />
      </youdao-translate>
    </option>
  </component>
</application>