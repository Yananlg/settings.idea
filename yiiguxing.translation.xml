<application>
  <component name="AppStorage">
    <histories>
      <item value="the 'primary' principal associated with the specified realm." />
      <item value="/** * Variant of JSR-303's {@link javax.validation.Valid}, supporting the * specification of validation groups. Designed for convenient use with * Spring's JSR-303 support but not JSR-303 specific. * * &lt;p&gt;Can be used e.g. with Spring MVC handler methods arguments. * Supported through {@link org.springframework.validation.SmartValidator}'s * validation hint concept, with validation group classes acting as hint objects. * * &lt;p&gt;Can also be used with method level validation, indicating that a specific * class is supposed to be validated at the method level (acting as a pointcut * for the corresponding validation interceptor), but also optionally specifying * the validation groups for method-level validation in the annotated class. * Applying this annotation at the method level allows for overriding the * validation groups for a specific method but does not serve as a pointcut; * a class-level annotation is nevertheless necessary to trigger method validation * for a specific bean to begin with. Can also be used as a meta-annotation on a * custom stereotype annotation or a custom group-specific validated annotation. * * @author Juergen Hoeller * @since 3.1 * @see javax.validation.Validator#validate(Object, Class[]) * @see org.springframework.validation.SmartValidator#validate(Object, org.springframework.validation.Errors, Object...) * @see org.springframework.validation.beanvalidation.SpringValidatorAdapter * @see org.springframework.validation.beanvalidation.MethodValidationPostProcessor */" />
      <item value="Variant of JSR-303's link javax.validation.Valid , supporting the specification of validation groups. Designed for convenient use with Spring's JSR-303 support but not JSR-303 specific. &lt;p&gt;Can be used e.g. with Spring MVC handler methods arguments. Supported through link org.springframework.validation.SmartValidator 's validation hint concept, with validation group classes acting as hint objects. &lt;p&gt;Can also be used with method level validation, indicating that a specific class is supposed to be validated at the method level (acting as a pointcut for the corresponding validation interceptor), but also optionally specifying the validation groups for method-level validation in the annotated class. Applying this annotation at the method level allows for overriding the validation groups for a specific method but does not serve as a pointcut; a class-level annotation is nevertheless necessary to trigger method validation for a specific bean to begin with. Can also be used as a meta-annotation on a custom stereotype annotation or a custom group-specific validated annotation. author Juergen Hoeller since 3.1 see javax.validation.Validator#validate(Object, Class[]) see org.springframework.validation.SmartValidator#validate(Object, org.springframework.validation.Errors, Object...) see org.springframework.validation.beanvalidation.SpringValidatorAdapter see org.springframework.validation.beanvalidation.MethodValidationPostProcessor" />
      <item value="Variant of JSR-303's   link javax.validation.Valid , supporting the    specification of validation groups. Designed for convenient use with    Spring's JSR-303 support but not JSR-303 specific.       &lt;p&gt;Can be used e.g. with Spring MVC handler methods arguments.    Supported through   link org.springframework.validation.SmartValidator 's    validation hint concept, with validation group classes acting as hint objects.       &lt;p&gt;Can also be used with method level validation, indicating that a specific    class is supposed to be validated at the method level (acting as a pointcut    for the corresponding validation interceptor), but also optionally specifying    the validation groups for method-level validation in the annotated class.    Applying this annotation at the method level allows for overriding the    validation groups for a specific method but does not serve as a pointcut;    a class-level annotation is nevertheless necessary to trigger method validation    for a specific bean to begin with. Can also be used as a meta-annotation on a    custom stereotype annotation or a custom group-specific validated annotation.        author Juergen Hoeller     since 3.1     see javax.validation.Validator#validate(Object, Class[])     see org.springframework.validation.SmartValidator#validate(Object, org.springframework.validation.Errors, Object...)     see org.springframework.validation.beanvalidation.SpringValidatorAdapter     see org.springframework.validation.beanvalidation.MethodValidationPostProcessor" />
      <item value="Variant of JSR-303's   link javax.validation.Valid , supporting the&#10;   specification of validation groups. Designed for convenient use with&#10;   Spring's JSR-303 support but not JSR-303 specific.&#10;  &#10;   &lt;p&gt;Can be used e.g. with Spring MVC handler methods arguments.&#10;   Supported through   link org.springframework.validation.SmartValidator 's&#10;   validation hint concept, with validation group classes acting as hint objects.&#10;  &#10;   &lt;p&gt;Can also be used with method level validation, indicating that a specific&#10;   class is supposed to be validated at the method level (acting as a pointcut&#10;   for the corresponding validation interceptor), but also optionally specifying&#10;   the validation groups for method-level validation in the annotated class.&#10;   Applying this annotation at the method level allows for overriding the&#10;   validation groups for a specific method but does not serve as a pointcut;&#10;   a class-level annotation is nevertheless necessary to trigger method validation&#10;   for a specific bean to begin with. Can also be used as a meta-annotation on a&#10;   custom stereotype annotation or a custom group-specific validated annotation.&#10;  &#10;    author Juergen Hoeller&#10;    since 3.1&#10;    see javax.validation.Validator#validate(Object, Class[])&#10;    see org.springframework.validation.SmartValidator#validate(Object, org.springframework.validation.Errors, Object...)&#10;    see org.springframework.validation.beanvalidation.SpringValidatorAdapter&#10;    see org.springframework.validation.beanvalidation.MethodValidationPostProcessor" />
      <item value="HOD" />
      <item value="Variant of JSR-303's {@link javax.validation.Valid}, supporting the specification of validation groups. Designed for convenient use with Spring's JSR-303 support but not JSR-303 specific. Can be used e.g. with Spring MVC handler methods arguments. Supported through {@link org.springframework.validation.SmartValidator}'s validation hint concept, with validation group classes acting as hint objects. Can also be used with method level validation, indicating that a specific class is supposed to be validated at the method level (acting as a pointcut for the corresponding validation interceptor), but also optionally specifying the validation groups for method-level validation in the annotated class. Applying this annotation at the method level allows for overriding the validation groups for a specific method but does not serve as a pointcut; a class-level annotation is nevertheless necessary to trigger method validation for a specific bean to begin with. Can also be used as a meta-annotation on a custom stereotype annotation or a custom group-specific validated annotation. @author Juergen Hoeller @since 3.1 @see javax.validation.Validator#validate(Object, Class[]) @see org.springframework.validation.SmartValidator#validate(Object, org.springframework.validation.Errors, Object...) @see org.springframework.validation.beanvalidation.SpringValidatorAdapter @see org.springframework.validation.beanvalidation.MethodValidationPostProcessor" />
      <item value="lenient" />
      <item value="Specify whether or not date/time parsing is to be lenient. With lenient parsing, the parser may use heuristics to interpret inputs that do not precisely match this object's format. With strict parsing, inputs must match this object's format." />
      <item value="flat" />
      <item value="blurry" />
      <item value="Introspecting table system_menu" />
      <item value="Introspecting" />
      <item value="the number of kilobytes, positive or negative" />
      <item value="Obtain a {@link DataSize} representing the specified number of kilobytes" />
      <item value="kilobytes" />
      <item value="A container object which may or may not contain a non-null value. If a value is present, {@code isPresent()} will return {@code true} and {@code get()} will return the value." />
      <item value="message" />
      <item value="datetime" />
      <item value="Annotation to allow {@link String} based type aliases to be used when writing type information for" />
      <item value="Demarcates a property to be used as version field to implement optimistic locking on entities." />
      <item value="Marks a field to be {@literal read-only} for the mapping framework and therefore will not be persisted." />
      <item value="Meta-Annotation to mark a store specific annotation as a query annotation. This allows generic special handing of finder methods on {@link Repository} interfaces." />
      <item value="nilin contact" />
      <item value="Ambiguous" />
      <item value="A converter converts a source object of type {@code S} to a target of type {@code T}." />
      <item value="A list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier. A non-empty value will override the value received from {@link Api#value()} or {@link Api#tags()} for this operation." />
      <item value="Allows declaring data binding disabled directly on an {@code @ModelAttribute} method parameter or on the attribute returned from an {@code @ModelAttribute} method, both of which would prevent data binding for that attribute. By default this is set to {@code true} in which case data binding applies. Set this to {@code false} to disable data binding." />
      <item value="account" />
      <item value="The name of the foreign key column. The table in which it is found depends upon the context." />
      <item value="The name of the column referenced by this foreign key column." />
      <item value="tinyint" />
      <item value="Cascade all operations" />
      <item value="Cascade persist operation" />
      <item value="Cascade merge operation" />
      <item value="Cascade remove operation" />
      <item value="Cascade refresh operation" />
      <item value="Cascade detach operation" />
      <item value="anon" />
      <item value="Increment an integer value stored as string value under {@code key} by {@code delta}." />
      <item value="a Map with the matching beans, containing the bean names as keys and the corresponding bean instances as values" />
      <item value="Modify the application context's internal bean factory after its standard initialization. All bean definitions will have been loaded, but no beans will have been instantiated yet. This allows for overriding or adding properties even to eager-initializing beans. @param beanFactory the bean factory used by the application context" />
      <item value="Corresponds to the 'notes' field of the operation. A verbose description of the operation." />
      <item value="Corresponds to the `summary` field of the operation. Provides a brief description of this operation. Should be 120 characters or less for proper visibility in Swagger-UI." />
      <item value="The annotation type {@code java.lang.annotation.Repeatable} is used to indicate that the annotation type whose declaration it (meta-)annotates is &lt;em&gt;repeatable&lt;/em&gt;. The value of {@code @Repeatable} indicates the &lt;em&gt;containing annotation type&lt;/em&gt; for the repeatable annotation type." />
      <item value="Amount of time before asynchronous request handling times out. If this value is not set, the default timeout of the underlying implementation is used, e.g. 10 seconds on Tomcat with Servlet 3." />
      <item value="the absolute path within the classpath" />
      <item value="Signed Url, which has the bucket name, object key, account information and accessed Ids and its signature. The url is recommended to be generated by generatePresignedUrl()." />
      <item value="The response type of the operation. In JAX-RS applications, the return type of the method would automatically be used, unless it is {@code javax.ws.rs.core.Response}. In that case, the operation return type would default to `void` as the actual response type cannot be known. Setting this property would override any automatically-derived data type. If the value used is a class representing a primitive ({@code Integer}, {@code Long}, ...) the corresponding primitive type will be used." />
      <item value="Declares a container wrapping the response. Valid values are &quot;List&quot;, &quot;Set&quot; or &quot;Map&quot;. Any other value will be ignored." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="292" />
        <entry key="ENGLISH" value="293" />
        <entry key="GERMAN" value="2" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20190222000270023" />
        <option name="appKeyConfigured" value="true" />
      </app-key>
    </option>
    <option name="foldOriginal" value="true" />
    <option name="ignoreRegExp" value="[\/\*\@\{\}]" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Source Code Pro" />
    <option name="primaryFontFamily" value="Microsoft YaHei" />
    <option name="translator" value="fanyi.baidu" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="0b9675ec9310c20e" />
      </youdao-translate>
    </option>
  </component>
</application>